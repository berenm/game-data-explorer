/** @babel */
/** @jsx etch.dom */

import child from 'child_process'

import {fs} from '../../core/util'
import ImageFileEditorComponent from '../../core/image-file-editor-component'

import {FRMParser} from './frm-parser'

export default class FRMEditorView extends ImageFileEditorComponent {
  constructor(properties, children) {
    super(properties, children, (properties) => {
      properties.parser = new FRMParser(properties.file)
    })
  }

  update(properties, children) {
    let frameList = ``
    let [offX, offY] = [0, 0]
    let [minX, maxX] = [+Infinity, 0]
    let [minY, maxY] = [+Infinity, 0]
    for (let [i, frame] of this.parser.frames.entries()) {
      if ((i % this.parser.header.frame_count) == 0) {
        offX = this.parser.header.off_x[i / this.parser.header.frame_count]
        offY = this.parser.header.off_y[i / this.parser.header.frame_count]
      }

      offX += frame.rel_x
      offY += frame.rel_y
      frame.off_x = offX - Math.floor(frame.width / 2)
      frame.off_y = offY - frame.height
      minX = Math.min(minX, frame.off_x)
      minY = Math.min(minY, frame.off_y)
      maxX = Math.max(maxX, frame.off_x + frame.width)
      maxY = Math.max(maxY, frame.off_y + frame.height)
    }

    let maxWidth = maxX - minX
    let maxHeight = maxY - minY
    for (let frame of this.parser.frames) {
      frame.off_x -= minX
      frame.off_y -= minY
    }

    const palette = {color: [
      (  0<<16) + (  0<<8) + (255<<0),
      (236<<16) + (236<<8) + (236<<0),
      (220<<16) + (220<<8) + (220<<0),
      (204<<16) + (204<<8) + (204<<0),
      (188<<16) + (188<<8) + (188<<0),
      (176<<16) + (176<<8) + (176<<0),
      (160<<16) + (160<<8) + (160<<0),
      (144<<16) + (144<<8) + (144<<0),
      (128<<16) + (128<<8) + (128<<0),
      (116<<16) + (116<<8) + (116<<0),
      (100<<16) + (100<<8) + (100<<0),
      ( 84<<16) + ( 84<<8) + ( 84<<0),
      ( 72<<16) + ( 72<<8) + ( 72<<0),
      ( 56<<16) + ( 56<<8) + ( 56<<0),
      ( 40<<16) + ( 40<<8) + ( 40<<0),
      ( 32<<16) + ( 32<<8) + ( 32<<0),
      (252<<16) + (236<<8) + (236<<0),
      (236<<16) + (216<<8) + (216<<0),
      (220<<16) + (196<<8) + (196<<0),
      (208<<16) + (176<<8) + (176<<0),
      (192<<16) + (160<<8) + (160<<0),
      (176<<16) + (144<<8) + (144<<0),
      (164<<16) + (128<<8) + (128<<0),
      (148<<16) + (112<<8) + (112<<0),
      (132<<16) + ( 96<<8) + ( 96<<0),
      (120<<16) + ( 84<<8) + ( 84<<0),
      (104<<16) + ( 68<<8) + ( 68<<0),
      ( 88<<16) + ( 56<<8) + ( 56<<0),
      ( 76<<16) + ( 44<<8) + ( 44<<0),
      ( 60<<16) + ( 36<<8) + ( 36<<0),
      ( 44<<16) + ( 24<<8) + ( 24<<0),
      ( 32<<16) + ( 16<<8) + ( 16<<0),
      (236<<16) + (236<<8) + (252<<0),
      (216<<16) + (216<<8) + (236<<0),
      (196<<16) + (196<<8) + (220<<0),
      (176<<16) + (176<<8) + (208<<0),
      (160<<16) + (160<<8) + (192<<0),
      (144<<16) + (144<<8) + (176<<0),
      (128<<16) + (128<<8) + (164<<0),
      (112<<16) + (112<<8) + (148<<0),
      ( 96<<16) + ( 96<<8) + (132<<0),
      ( 84<<16) + ( 84<<8) + (120<<0),
      ( 68<<16) + ( 68<<8) + (104<<0),
      ( 56<<16) + ( 56<<8) + ( 88<<0),
      ( 44<<16) + ( 44<<8) + ( 76<<0),
      ( 36<<16) + ( 36<<8) + ( 60<<0),
      ( 24<<16) + ( 24<<8) + ( 44<<0),
      ( 16<<16) + ( 16<<8) + ( 32<<0),
      (252<<16) + (176<<8) + (240<<0),
      (196<<16) + ( 96<<8) + (168<<0),
      (104<<16) + ( 36<<8) + ( 96<<0),
      ( 76<<16) + ( 20<<8) + ( 72<<0),
      ( 56<<16) + ( 12<<8) + ( 52<<0),
      ( 40<<16) + ( 16<<8) + ( 36<<0),
      ( 36<<16) + (  4<<8) + ( 36<<0),
      ( 28<<16) + ( 12<<8) + ( 24<<0),
      (252<<16) + (252<<8) + (200<<0),
      (252<<16) + (252<<8) + (124<<0),
      (228<<16) + (216<<8) + ( 12<<0),
      (204<<16) + (184<<8) + ( 28<<0),
      (184<<16) + (156<<8) + ( 40<<0),
      (164<<16) + (136<<8) + ( 48<<0),
      (144<<16) + (120<<8) + ( 36<<0),
      (124<<16) + (104<<8) + ( 24<<0),
      (108<<16) + ( 88<<8) + ( 16<<0),
      ( 88<<16) + ( 72<<8) + (  8<<0),
      ( 72<<16) + ( 56<<8) + (  4<<0),
      ( 52<<16) + ( 40<<8) + (  0<<0),
      ( 32<<16) + ( 24<<8) + (  0<<0),
      (216<<16) + (252<<8) + (156<<0),
      (180<<16) + (216<<8) + (132<<0),
      (152<<16) + (184<<8) + (112<<0),
      (120<<16) + (152<<8) + ( 92<<0),
      ( 92<<16) + (120<<8) + ( 72<<0),
      ( 64<<16) + ( 88<<8) + ( 52<<0),
      ( 40<<16) + ( 56<<8) + ( 32<<0),
      (112<<16) + ( 96<<8) + ( 80<<0),
      ( 84<<16) + ( 72<<8) + ( 52<<0),
      ( 56<<16) + ( 48<<8) + ( 32<<0),
      (104<<16) + (120<<8) + ( 80<<0),
      (112<<16) + (120<<8) + ( 32<<0),
      (112<<16) + (104<<8) + ( 40<<0),
      ( 96<<16) + ( 96<<8) + ( 36<<0),
      ( 76<<16) + ( 68<<8) + ( 36<<0),
      ( 56<<16) + ( 48<<8) + ( 32<<0),
      (156<<16) + (172<<8) + (156<<0),
      (120<<16) + (148<<8) + (120<<0),
      ( 88<<16) + (124<<8) + ( 88<<0),
      ( 64<<16) + (104<<8) + ( 64<<0),
      ( 56<<16) + ( 88<<8) + ( 88<<0),
      ( 48<<16) + ( 76<<8) + ( 72<<0),
      ( 40<<16) + ( 68<<8) + ( 60<<0),
      ( 32<<16) + ( 60<<8) + ( 44<<0),
      ( 28<<16) + ( 48<<8) + ( 36<<0),
      ( 20<<16) + ( 40<<8) + ( 24<<0),
      ( 16<<16) + ( 32<<8) + ( 16<<0),
      ( 24<<16) + ( 48<<8) + ( 24<<0),
      ( 16<<16) + ( 36<<8) + ( 12<<0),
      (  8<<16) + ( 28<<8) + (  4<<0),
      (  4<<16) + ( 20<<8) + (  0<<0),
      (  4<<16) + ( 12<<8) + (  0<<0),
      (140<<16) + (156<<8) + (156<<0),
      (120<<16) + (148<<8) + (152<<0),
      (100<<16) + (136<<8) + (148<<0),
      ( 80<<16) + (124<<8) + (144<<0),
      ( 64<<16) + (108<<8) + (140<<0),
      ( 48<<16) + ( 88<<8) + (140<<0),
      ( 44<<16) + ( 76<<8) + (124<<0),
      ( 40<<16) + ( 68<<8) + (108<<0),
      ( 32<<16) + ( 56<<8) + ( 92<<0),
      ( 28<<16) + ( 48<<8) + ( 76<<0),
      ( 24<<16) + ( 40<<8) + ( 64<<0),
      (156<<16) + (164<<8) + (164<<0),
      ( 56<<16) + ( 72<<8) + (104<<0),
      ( 80<<16) + ( 88<<8) + ( 88<<0),
      ( 88<<16) + (104<<8) + (132<<0),
      ( 56<<16) + ( 64<<8) + ( 80<<0),
      (188<<16) + (188<<8) + (188<<0),
      (172<<16) + (164<<8) + (152<<0),
      (160<<16) + (144<<8) + (124<<0),
      (148<<16) + (124<<8) + ( 96<<0),
      (136<<16) + (104<<8) + ( 76<<0),
      (124<<16) + ( 88<<8) + ( 52<<0),
      (112<<16) + ( 72<<8) + ( 36<<0),
      (100<<16) + ( 60<<8) + ( 20<<0),
      ( 88<<16) + ( 48<<8) + (  8<<0),
      (252<<16) + (204<<8) + (204<<0),
      (252<<16) + (176<<8) + (176<<0),
      (252<<16) + (152<<8) + (152<<0),
      (252<<16) + (124<<8) + (124<<0),
      (252<<16) + (100<<8) + (100<<0),
      (252<<16) + ( 72<<8) + ( 72<<0),
      (252<<16) + ( 48<<8) + ( 48<<0),
      (252<<16) + (  0<<8) + (  0<<0),
      (224<<16) + (  0<<8) + (  0<<0),
      (196<<16) + (  0<<8) + (  0<<0),
      (168<<16) + (  0<<8) + (  0<<0),
      (144<<16) + (  0<<8) + (  0<<0),
      (116<<16) + (  0<<8) + (  0<<0),
      ( 88<<16) + (  0<<8) + (  0<<0),
      ( 64<<16) + (  0<<8) + (  0<<0),
      (252<<16) + (224<<8) + (200<<0),
      (252<<16) + (196<<8) + (148<<0),
      (252<<16) + (184<<8) + (120<<0),
      (252<<16) + (172<<8) + ( 96<<0),
      (252<<16) + (156<<8) + ( 72<<0),
      (252<<16) + (148<<8) + ( 44<<0),
      (252<<16) + (136<<8) + ( 20<<0),
      (252<<16) + (124<<8) + (  0<<0),
      (220<<16) + (108<<8) + (  0<<0),
      (192<<16) + ( 96<<8) + (  0<<0),
      (164<<16) + ( 80<<8) + (  0<<0),
      (132<<16) + ( 68<<8) + (  0<<0),
      (104<<16) + ( 52<<8) + (  0<<0),
      ( 76<<16) + ( 36<<8) + (  0<<0),
      ( 48<<16) + ( 24<<8) + (  0<<0),
      (248<<16) + (212<<8) + (164<<0),
      (216<<16) + (176<<8) + (120<<0),
      (200<<16) + (160<<8) + (100<<0),
      (188<<16) + (144<<8) + ( 84<<0),
      (172<<16) + (128<<8) + ( 68<<0),
      (156<<16) + (116<<8) + ( 52<<0),
      (140<<16) + (100<<8) + ( 40<<0),
      (124<<16) + ( 88<<8) + ( 28<<0),
      (112<<16) + ( 76<<8) + ( 20<<0),
      ( 96<<16) + ( 64<<8) + (  8<<0),
      ( 80<<16) + ( 52<<8) + (  4<<0),
      ( 64<<16) + ( 40<<8) + (  0<<0),
      ( 52<<16) + ( 32<<8) + (  0<<0),
      (252<<16) + (228<<8) + (184<<0),
      (232<<16) + (200<<8) + (152<<0),
      (212<<16) + (172<<8) + (124<<0),
      (196<<16) + (144<<8) + (100<<0),
      (176<<16) + (116<<8) + ( 76<<0),
      (160<<16) + ( 92<<8) + ( 56<<0),
      (144<<16) + ( 76<<8) + ( 44<<0),
      (132<<16) + ( 60<<8) + ( 32<<0),
      (120<<16) + ( 44<<8) + ( 24<<0),
      (108<<16) + ( 32<<8) + ( 16<<0),
      ( 92<<16) + ( 20<<8) + (  8<<0),
      ( 72<<16) + ( 12<<8) + (  4<<0),
      ( 60<<16) + (  4<<8) + (  0<<0),
      (252<<16) + (232<<8) + (220<<0),
      (248<<16) + (212<<8) + (188<<0),
      (244<<16) + (192<<8) + (160<<0),
      (240<<16) + (176<<8) + (132<<0),
      (240<<16) + (160<<8) + (108<<0),
      (240<<16) + (148<<8) + ( 92<<0),
      (216<<16) + (128<<8) + ( 84<<0),
      (192<<16) + (112<<8) + ( 72<<0),
      (168<<16) + ( 96<<8) + ( 64<<0),
      (144<<16) + ( 80<<8) + ( 56<<0),
      (120<<16) + ( 64<<8) + ( 48<<0),
      ( 96<<16) + ( 48<<8) + ( 36<<0),
      ( 72<<16) + ( 36<<8) + ( 28<<0),
      ( 56<<16) + ( 24<<8) + ( 20<<0),
      (100<<16) + (228<<8) + (100<<0),
      ( 20<<16) + (152<<8) + ( 20<<0),
      (  0<<16) + (164<<8) + (  0<<0),
      ( 80<<16) + ( 80<<8) + ( 72<<0),
      (  0<<16) + (108<<8) + (  0<<0),
      (140<<16) + (140<<8) + (132<<0),
      ( 28<<16) + ( 28<<8) + ( 28<<0),
      (104<<16) + ( 80<<8) + ( 56<<0),
      ( 48<<16) + ( 40<<8) + ( 32<<0),
      (140<<16) + (112<<8) + ( 96<<0),
      ( 72<<16) + ( 56<<8) + ( 40<<0),
      ( 12<<16) + ( 12<<8) + ( 12<<0),
      ( 60<<16) + ( 60<<8) + ( 60<<0),
      (108<<16) + (116<<8) + (108<<0),
      (120<<16) + (132<<8) + (120<<0),
      (136<<16) + (148<<8) + (136<<0),
      (148<<16) + (164<<8) + (148<<0),
      ( 88<<16) + (104<<8) + ( 96<<0),
      ( 96<<16) + (112<<8) + (104<<0),
      ( 60<<16) + (248<<8) + (  0<<0),
      ( 56<<16) + (212<<8) + (  8<<0),
      ( 52<<16) + (180<<8) + ( 16<<0),
      ( 48<<16) + (148<<8) + ( 20<<0),
      ( 40<<16) + (116<<8) + ( 24<<0),
      (252<<16) + (252<<8) + (252<<0),
      (240<<16) + (236<<8) + (208<<0),
      (208<<16) + (184<<8) + (136<<0),
      (152<<16) + (124<<8) + ( 80<<0),
      (104<<16) + ( 88<<8) + ( 60<<0),
      ( 80<<16) + ( 64<<8) + ( 36<<0),
      ( 52<<16) + ( 40<<8) + ( 28<<0),
      ( 24<<16) + ( 16<<8) + ( 12<<0),
      (  0<<16) + (  0<<8) + (  0<<0),
      (  0<<16) + (108<<8) + (  0<<0),
      ( 11<<16) + (115<<8) + (  7<<0),
      ( 27<<16) + (123<<8) + ( 15<<0),
      ( 43<<16) + (131<<8) + ( 27<<0),
      (107<<16) + (107<<8) + (111<<0),
      ( 99<<16) + (103<<8) + (127<<0),
      ( 87<<16) + (107<<8) + (143<<0),
      (  0<<16) + (147<<8) + (163<<0),
      (107<<16) + (187<<8) + (255<<0),
      (255<<16) + (  0<<8) + (  0<<0),
      (215<<16) + (  0<<8) + (  0<<0),
      (147<<16) + ( 43<<8) + ( 11<<0),
      (255<<16) + (119<<8) + (  0<<0),
      (255<<16) + ( 59<<8) + (  0<<0),
      ( 71<<16) + (  0<<8) + (  0<<0),
      (123<<16) + (  0<<8) + (  0<<0),
      (179<<16) + (  0<<8) + (  0<<0),
      (123<<16) + (  0<<8) + (  0<<0),
      ( 71<<16) + (  0<<8) + (  0<<0),
      ( 83<<16) + ( 63<<8) + ( 43<<0),
      ( 75<<16) + ( 59<<8) + ( 43<<0),
      ( 67<<16) + ( 55<<8) + ( 39<<0),
      ( 63<<16) + ( 51<<8) + ( 39<<0),
      ( 55<<16) + ( 47<<8) + ( 35<<0),
      ( 51<<16) + ( 43<<8) + ( 35<<0),
      (252<<16) + (  0<<8) + (  0<<0),
      (255<<16) + (255<<8) + (255<<0),
    ]}
    for (let [i, frame] of this.parser.frames.entries()) {
      const buffer = new Buffer(frame.pixels.length * 4)
      for (let j = 0, end = frame.pixels.length, offset = 0; j < end; ++j) {
        const pixel = frame.pixels[j]
        const color = pixel === 0 ? 0 : palette.color[pixel] + 0xff000000
        buffer.writeUInt8((color >> 16) & 0xff, offset++)
        buffer.writeUInt8((color >>  8) & 0xff, offset++)
        buffer.writeUInt8((color >>  0) & 0xff, offset++)
        buffer.writeUInt8((color >> 24) & 0xff, offset++)
      }

      const fileName = `${this.file.path}-${i}.pam`
      const frameFile = fs.openSync(fileName, 'w')
      fs.appendFileSync(frameFile,
                       'P7\n' +
                       `WIDTH ${frame.width}\n` +
                       `HEIGHT ${frame.height}\n` +
                       'DEPTH 8\n' +
                       'MAXVAL 255\n' +
                       'TUPLTYPE RGB_ALPHA\n' +
                       'ENDHDR\n')
      fs.appendFileSync(frameFile, buffer)

      const framePage = ` -page +${frame.off_x}+${frame.off_y} '${fileName}'`
      child.execSync(`convert -size ${maxWidth}x${maxHeight} -background transparent xc:none ${framePage} -layers flatten '${this.file.path}-${i.toString().padStart(4, '0')}.png'`)

      frameList += framePage
    }

    if (this.parser.frames.length == 1) {
      child.execSync(`convert '${this.file.path}-0000.png' '${this.file.path}.png'`)
    } else {
      let framePerRotation = this.parser.frames.length / this.parser.rotation_count
      let commandLine = ''
      for (let i = 0; i < this.parser.rotation_count; i++) {
        commandLine += ' \\('
        for (let j = 0; j < framePerRotation; j++) {
          commandLine += ` '${this.file.path}-${(i * framePerRotation + j).toString().padStart(4, '0')}.png'`
        }
        commandLine += ' +append \\)'
      }

      child.execSync(`convert ${commandLine} -append '${this.file.path}.png'`)
      child.execSync(`convert -background transparent ${frameList} -set delay ${100 / this.parser.header.frame_rate} -set dispose background -page ${maxWidth}x${maxHeight} '${this.file.path}.gif'`)
    }

    super.update(properties, children)
  }

  get parser() { return this.properties.parser }
  get src() {
    if (this.parser.frames.length == 1) {
      return `${this.file.path}.png`
    } else {
      return `${this.file.path}.gif`
    }
  }
}
