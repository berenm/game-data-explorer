/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[11,14,15,16,18,67],$V1=[1,23],$V2=[20,22],$V3=[22,69,71,72,73,74],$V4=[25,26,30,31,33,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,63,64,65],$V5=[25,30,77,80],$V6=[1,113],$V7=[1,115],$V8=[1,123],$V9=[79,82],$Va=[25,26,30,31,33,35,36,37,38,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,63,64,65,82],$Vb=[2,74];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"file":3,"@file":4,"Identifier":5,"EOL":6,"model":7,"EOF":8,"<model>":9,"modelProps":10,"</model>":11,"animation":12,"geometry":13,"@super":14,"@classify":15,"@animScale":16,"float":17,"<geom>":18,"geomNodes":19,"</geom>":20,"geomNode":21,"<node>":22,"geomNodeType":23,"geomNodeProps":24,"</node>":25,"@danglymesh":26,"@dummy":27,"@trimesh":28,"@patch":29,"@parent":30,"@position":31,"float3":32,"@orientation":33,"float4":34,"@wirecolor":35,"@ambient":36,"@diffuse":37,"@specular":38,"@shininess":39,"@bitmap":40,"int":41,"@period":42,"@tightness":43,"@displacement":44,"@showdispl":45,"@displtype":46,"@alpha":47,"@transparencyhint":48,"@tilefade":49,"@scale":50,"@render":51,"@shadow":52,"@beaming":53,"@inheritcolor":54,"@selfillumcolor":55,"@rotatetexture":56,"@center":57,"@gizmo":58,"@vertices":59,"float3s":60,"@faces":61,"faces":62,"@texCoords":63,"@colors":64,"@constraints":65,"floats":66,"<anim>":67,"animProps":68,"</anim>":69,"animNode":70,"@event":71,"@length":72,"@transTime":73,"@animRoot":74,"animNodeType":75,"animNodeProps":76,"@positionKey":77,"positionKeys":78,"ENDLIST":79,"@orientationKey":80,"orientationKeys":81,"Number":82,"$accept":0,"$end":1},
terminals_: {2:"error",4:"@file",5:"Identifier",6:"EOL",8:"EOF",9:"<model>",11:"</model>",14:"@super",15:"@classify",16:"@animScale",18:"<geom>",20:"</geom>",22:"<node>",25:"</node>",26:"@danglymesh",27:"@dummy",28:"@trimesh",29:"@patch",30:"@parent",31:"@position",33:"@orientation",35:"@wirecolor",36:"@ambient",37:"@diffuse",38:"@specular",39:"@shininess",40:"@bitmap",42:"@period",43:"@tightness",44:"@displacement",45:"@showdispl",46:"@displtype",47:"@alpha",48:"@transparencyhint",49:"@tilefade",50:"@scale",51:"@render",52:"@shadow",53:"@beaming",54:"@inheritcolor",55:"@selfillumcolor",56:"@rotatetexture",57:"@center",58:"@gizmo",59:"@vertices",61:"@faces",63:"@texCoords",64:"@colors",65:"@constraints",67:"<anim>",69:"</anim>",71:"@event",72:"@length",73:"@transTime",74:"@animRoot",77:"@positionKey",79:"ENDLIST",80:"@orientationKey",82:"Number"},
productions_: [0,[3,5],[7,7],[10,0],[10,2],[10,2],[10,5],[10,4],[10,4],[13,7],[19,0],[19,2],[21,7],[23,1],[23,1],[23,1],[23,1],[24,0],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,4],[24,5],[24,5],[24,5],[24,5],[24,5],[62,0],[62,10],[62,9],[12,9],[68,0],[68,2],[68,5],[68,4],[68,4],[68,4],[75,1],[70,7],[76,0],[76,4],[76,6],[76,6],[78,0],[78,4],[81,0],[81,4],[41,1],[17,1],[32,3],[34,4],[60,0],[60,5],[66,0],[66,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; this.$.file = $$[$0-3]; return this.$;
break;
case 2:
this.$ = $$[$0-3];
break;
case 3:
this.$ = {geometries: [], animations: []};
break;
case 4:
this.$ = $$[$0-1]; this.$.animations.push($$[$0]);
break;
case 5:
this.$ = $$[$0-1]; this.$.geometries.push($$[$0]);
break;
case 6:
this.$ = $$[$0-4]; this.$.super = [$$[$0-2], $$[$0-1]];
break;
case 7:
this.$ = $$[$0-3]; this.$.classify = $$[$0-1];
break;
case 8:
this.$ = $$[$0-3]; this.$.animScale = $$[$0-1];
break;
case 9:
this.$ = {name: $$[$0-5], nodes: $$[$0-3]};
break;
case 10: case 50: case 66: case 68: case 74: case 76:
this.$ = [];
break;
case 11:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 12:
this.$ = $$[$0-2]; this.$.type = $$[$0-5]; this.$.name = $$[$0-4];
break;
case 17: case 62:
this.$ = {};
break;
case 18: case 63:
this.$ = $$[$0-3]; this.$.parent = $$[$0-1];
break;
case 19:
this.$ = $$[$0-3]; this.$.position = $$[$0-1];
break;
case 20:
this.$ = $$[$0-3]; this.$.orientation = $$[$0-1];
break;
case 21:
this.$ = $$[$0-3]; this.$.wirecolor = $$[$0-1];
break;
case 22:
this.$ = $$[$0-3]; this.$.ambient = $$[$0-1];
break;
case 23:
this.$ = $$[$0-3]; this.$.diffuse = $$[$0-1];
break;
case 24:
this.$ = $$[$0-3]; this.$.specular = $$[$0-1];
break;
case 25:
this.$ = $$[$0-3]; this.$.shininess = $$[$0-1];
break;
case 26:
this.$ = $$[$0-3]; this.$.bitmap = $$[$0-1];
break;
case 27:
this.$ = $$[$0-3]; this.$.danglymesh = $$[$0-1];
break;
case 28:
this.$ = $$[$0-3]; this.$.period = $$[$0-1];
break;
case 29:
this.$ = $$[$0-3]; this.$.tightness = $$[$0-1];
break;
case 30:
this.$ = $$[$0-3]; this.$.displacement = $$[$0-1];
break;
case 31:
this.$ = $$[$0-3]; this.$.showdispl = $$[$0-2];
break;
case 32:
this.$ = $$[$0-3]; this.$.displtype = $$[$0-1];
break;
case 33:
this.$ = $$[$0-3]; this.$.alpha = $$[$0-1];
break;
case 34:
this.$ = $$[$0-3]; this.$.transparencyhint = $$[$0-1];
break;
case 35:
this.$ = $$[$0-3]; this.$.tilefade = $$[$0-1];
break;
case 36:
this.$ = $$[$0-3]; this.$.scale = $$[$0-1];
break;
case 37:
this.$ = $$[$0-3]; this.$.render = $$[$0-1];
break;
case 38:
this.$ = $$[$0-3]; this.$.shadow = $$[$0-1];
break;
case 39:
this.$ = $$[$0-3]; this.$.beaming = $$[$0-1];
break;
case 40:
this.$ = $$[$0-3]; this.$.inheritcolor = $$[$0-1];
break;
case 41:
this.$ = $$[$0-3]; this.$.selfillumcolor = $$[$0-1];
break;
case 42:
this.$ = $$[$0-3]; this.$.rotatetexture = $$[$0-1];
break;
case 43:
this.$ = $$[$0-3]; this.$.center = $$[$0-1];
break;
case 44:
this.$ = $$[$0-3]; this.$.gizmo = $$[$0-2];
break;
case 45:
this.$ = $$[$0-4]; this.$.vertices = {count:$$[$0-2], list:$$[$0]};
break;
case 46:
this.$ = $$[$0-4]; this.$.faces = {count:$$[$0-2], list:$$[$0]};
break;
case 47:
this.$ = $$[$0-4]; this.$.texCoords = {count:$$[$0-2], list:$$[$0]};
break;
case 48:
this.$ = $$[$0-4]; this.$.colors = {count:$$[$0-2], list:$$[$0]};
break;
case 49:
this.$ = $$[$0-4]; this.$.constraints = {count:$$[$0-2], list:$$[$0]};
break;
case 51:
this.$ = $$[$0-9]; this.$.push([$$[$0-8],$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1]]);
break;
case 52:
this.$ = $$[$0-8]; this.$.push([$$[$0-7],$$[$0-6],$$[$0-5],$$[$0-4],$$[$0-3],$$[$0-2],$$[$0-1],0]);
break;
case 53:
this.$ = $$[$0-4]; this.$.name = [$$[$0-7], $$[$0-6]];
break;
case 54:
this.$ = {nodes:[], events:[]};
break;
case 55:
this.$ = $$[$0-1]; this.$.nodes.push($$[$0]);
break;
case 56:
this.$ = $$[$0-4]; this.$.events.push({time:$$[$0-2],name:$$[$0-1]});
break;
case 57:
this.$ = $$[$0-3]; this.$.length = $$[$0-1];
break;
case 58:
this.$ = $$[$0-3]; this.$.transTime = $$[$0-1];
break;
case 59:
this.$ = $$[$0-3]; this.$.root = $$[$0-1];
break;
case 61:
this.$ = $$[$0-2]; this.$.name = [$$[$0-5], $$[$0-4]];
break;
case 64:
this.$ = $$[$0-5]; this.$.positionKeys = $$[$0-2];
break;
case 65:
this.$ = $$[$0-5]; this.$.orientationKeys = $$[$0-2];
break;
case 67: case 69:
this.$ = $$[$0-3]; this.$.push([$$[$0-2], $$[$0-1]]);
break;
case 70:
this.$ = parseInt($$[$0]);
break;
case 71:
this.$ = parseFloat($$[$0]);
break;
case 72:
this.$ = [parseFloat($$[$0-2]),parseFloat($$[$0-1]),parseFloat($$[$0])];
break;
case 73:
this.$ = [parseFloat($$[$0-3]),parseFloat($$[$0-2]),parseFloat($$[$0-1]),parseFloat($$[$0])];
break;
case 75:
this.$ = $$[$0-4]; this.$.push($$[$0-3]); this.$.push($$[$0-2]); this.$.push($$[$0-1]);
break;
case 77:
this.$ = $$[$0-2]; this.$.push($$[$0-1]);
break;
}
},
table: [{3:1,4:[1,2]},{1:[3]},{5:[1,3]},{6:[1,4]},{7:5,9:[1,6]},{8:[1,7]},{5:[1,8]},{1:[2,1]},{6:[1,9]},o($V0,[2,3],{10:10}),{11:[1,11],12:12,13:13,14:[1,14],15:[1,15],16:[1,16],18:[1,18],67:[1,17]},{5:[1,19]},o($V0,[2,4]),o($V0,[2,5]),{5:[1,20]},{5:[1,21]},{17:22,82:$V1},{5:[1,24]},{5:[1,25]},{6:[1,26]},{5:[1,27]},{6:[1,28]},{6:[1,29]},o([5,6,82],[2,71]),{5:[1,30]},{6:[1,31]},{8:[2,2]},{6:[1,32]},o($V0,[2,7]),o($V0,[2,8]),{6:[1,33]},o($V2,[2,10],{19:34}),o($V0,[2,6]),o($V3,[2,54],{68:35}),{20:[1,36],21:37,22:[1,38]},{22:[1,45],69:[1,39],70:40,71:[1,41],72:[1,42],73:[1,43],74:[1,44]},{5:[1,46]},o($V2,[2,11]),{23:47,26:[1,48],27:[1,49],28:[1,50],29:[1,51]},{5:[1,52]},o($V3,[2,55]),{17:53,82:$V1},{17:54,82:$V1},{17:55,82:$V1},{5:[1,56]},{27:[1,58],75:57},{6:[1,59]},{5:[1,60]},{5:[2,13]},{5:[2,14]},{5:[2,15]},{5:[2,16]},{5:[1,61]},{5:[1,62]},{6:[1,63]},{6:[1,64]},{6:[1,65]},{5:[1,66]},{5:[2,60]},o($V0,[2,9]),{6:[1,67]},{6:[1,68]},{6:[1,69]},o($V3,[2,57]),o($V3,[2,58]),o($V3,[2,59]),{6:[1,70]},o($V4,[2,17],{24:71}),o($V0,[2,53]),o($V3,[2,56]),o($V5,[2,62],{76:72}),{25:[1,73],26:[1,83],30:[1,74],31:[1,75],33:[1,76],35:[1,77],36:[1,78],37:[1,79],38:[1,80],39:[1,81],40:[1,82],42:[1,84],43:[1,85],44:[1,86],45:[1,87],46:[1,88],47:[1,89],48:[1,90],49:[1,91],50:[1,92],51:[1,93],52:[1,94],53:[1,95],54:[1,96],55:[1,97],56:[1,98],57:[1,99],58:[1,100],59:[1,101],61:[1,102],63:[1,103],64:[1,104],65:[1,105]},{25:[1,106],30:[1,107],77:[1,108],80:[1,109]},{6:[1,110]},{5:[1,111]},{32:112,82:$V6},{34:114,82:$V7},{32:116,82:$V6},{32:117,82:$V6},{32:118,82:$V6},{32:119,82:$V6},{17:120,82:$V1},{5:[1,121]},{41:122,82:$V8},{17:124,82:$V1},{17:125,82:$V1},{17:126,82:$V1},{5:[1,127]},{41:128,82:$V8},{17:129,82:$V1},{41:130,82:$V8},{41:131,82:$V8},{17:132,82:$V1},{41:133,82:$V8},{41:134,82:$V8},{41:135,82:$V8},{41:136,82:$V8},{32:137,82:$V6},{41:138,82:$V8},{32:139,82:$V6},{5:[1,140]},{41:141,82:$V8},{41:142,82:$V8},{41:143,82:$V8},{41:144,82:$V8},{41:145,82:$V8},{6:[1,146]},{5:[1,147]},{6:[1,148]},{6:[1,149]},o($V2,[2,12]),{6:[1,150]},{6:[1,151]},{82:[1,152]},{6:[1,153]},{82:[1,154]},{6:[1,155]},{6:[1,156]},{6:[1,157]},{6:[1,158]},{6:[1,159]},{6:[1,160]},{6:[1,161]},o([6,82],[2,70]),{6:[1,162]},{6:[1,163]},{6:[1,164]},{6:[1,165]},{6:[1,166]},{6:[1,167]},{6:[1,168]},{6:[1,169]},{6:[1,170]},{6:[1,171]},{6:[1,172]},{6:[1,173]},{6:[1,174]},{6:[1,175]},{6:[1,176]},{6:[1,177]},{6:[1,178]},{6:[1,179]},{6:[1,180]},{6:[1,181]},{6:[1,182]},{6:[1,183]},o($V3,[2,61]),{6:[1,184]},o($V9,[2,66],{78:185}),o($V9,[2,68],{81:186}),o($V4,[2,18]),o($V4,[2,19]),{82:[1,187]},o($V4,[2,20]),{82:[1,188]},o($V4,[2,21]),o($V4,[2,22]),o($V4,[2,23]),o($V4,[2,24]),o($V4,[2,25]),o($V4,[2,26]),o($V4,[2,27]),o($V4,[2,28]),o($V4,[2,29]),o($V4,[2,30]),o($V4,[2,31]),o($V4,[2,32]),o($V4,[2,33]),o($V4,[2,34]),o($V4,[2,35]),o($V4,[2,36]),o($V4,[2,37]),o($V4,[2,38]),o($V4,[2,39]),o($V4,[2,40]),o($V4,[2,41]),o($V4,[2,42]),o($V4,[2,43]),o($V4,[2,44]),o($Va,$Vb,{60:189}),o($Va,[2,50],{62:190}),o($Va,$Vb,{60:191}),o($Va,$Vb,{60:192}),o($Va,[2,76],{66:193}),o($V5,[2,63]),{17:195,79:[1,194],82:$V1},{17:197,79:[1,196],82:$V1},{6:[2,72]},{82:[1,198]},o($V4,[2,45],{17:199,82:$V1}),o($V4,[2,46],{41:200,82:$V8}),o($V4,[2,47],{17:199,82:$V1}),o($V4,[2,48],{17:199,82:$V1}),o($V4,[2,49],{17:201,82:$V1}),{6:[1,202]},{32:203,82:$V6},{6:[1,204]},{34:205,82:$V7},{6:[2,73]},{17:206,82:$V1},{41:207,82:$V8},{6:[1,208]},o($V5,[2,64]),{6:[1,209]},o($V5,[2,65]),{6:[1,210]},{17:211,82:$V1},{41:212,82:$V8},o($Va,[2,77]),o($V9,[2,67]),o($V9,[2,69]),{6:[1,213]},{41:214,82:$V8},o($Va,[2,75]),{41:215,82:$V8},{41:216,82:$V8},{41:217,82:$V8},{6:[1,219],41:218,82:$V8},{6:[1,220]},o($Va,[2,52]),o($Va,[2,51])],
defaultActions: {7:[2,1],26:[2,2],48:[2,13],49:[2,14],50:[2,15],51:[2,16],58:[2,60],187:[2,72],198:[2,73]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comment */
break;
case 2:return 4
break;
case 3:return 9
break;
case 4:return 11
break;
case 5:return 14
break;
case 6:return 15
break;
case 7:return 16
break;
case 8:return 18
break;
case 9:return 20
break;
case 10:return 22
break;
case 11:return 25
break;
case 12:return 30
break;
case 13:return 31
break;
case 14:return 33
break;
case 15:return 35
break;
case 16:return 26
break;
case 17:return 42
break;
case 18:return 43
break;
case 19:return 44
break;
case 20:return 45
break;
case 21:return 46
break;
case 22:return 47
break;
case 23:return 48
break;
case 24:return 49
break;
case 25:return 50
break;
case 26:return 51
break;
case 27:return 52
break;
case 28:return 53
break;
case 29:return 54
break;
case 30:return 55
break;
case 31:return 56
break;
case 32:return 57
break;
case 33:return 58
break;
case 34:return 64
break;
case 35:return 65
break;
case 36:return 27
break;
case 37:return 28
break;
case 38:return 29
break;
case 39:return 36
break;
case 40:return 37
break;
case 41:return 38
break;
case 42:return 39
break;
case 43:return 40
break;
case 44:return 59
break;
case 45:return 61
break;
case 46:return 63
break;
case 47:return 67
break;
case 48:return 69
break;
case 49:return 72
break;
case 50:return 73
break;
case 51:return 74
break;
case 52:return 77
break;
case 53:return 80
break;
case 54:return 71
break;
case 55:return 79
break;
case 56:return 82
break;
case 57:return 5
break;
case 58:return 6
break;
case 59:return 8
break;
case 60:return 'INVALID'
break;
}
},
rules: [/^(?:[ \t\r]+)/,/^(?:#.*(\r?\n)+)/,/^(?:filedependancy\b)/,/^(?:newmodel\b)/,/^(?:donemodel\b)/,/^(?:setsupermodel\b)/,/^(?:classification\b)/,/^(?:setanimationscale\b)/,/^(?:beginmodelgeom\b)/,/^(?:endmodelgeom\b)/,/^(?:node\b)/,/^(?:endnode\b)/,/^(?:parent\b)/,/^(?:position\b)/,/^(?:orientation\b)/,/^(?:wirecolor\b)/,/^(?:danglymesh\b)/,/^(?:period\b)/,/^(?:tightness\b)/,/^(?:displacement\b)/,/^(?:showdispl\b)/,/^(?:displtype\b)/,/^(?:alpha\b)/,/^(?:transparencyhint\b)/,/^(?:tilefade\b)/,/^(?:scale\b)/,/^(?:render\b)/,/^(?:shadow\b)/,/^(?:beaming\b)/,/^(?:inheritcolor\b)/,/^(?:selfillumcolor\b)/,/^(?:rotatetexture\b)/,/^(?:center\b)/,/^(?:gizmo\b)/,/^(?:colors\b)/,/^(?:constraints\b)/,/^(?:dummy\b)/,/^(?:trimesh\b)/,/^(?:patch\b)/,/^(?:ambient\b)/,/^(?:diffuse\b)/,/^(?:specular\b)/,/^(?:shininess\b)/,/^(?:bitmap\b)/,/^(?:verts\b)/,/^(?:faces\b)/,/^(?:tverts\b)/,/^(?:newanim\b)/,/^(?:doneanim\b)/,/^(?:length\b)/,/^(?:transtime\b)/,/^(?:animroot\b)/,/^(?:positionkey\b)/,/^(?:orientationkey\b)/,/^(?:event\b)/,/^(?:endlist\b)/,/^(?:[-+]?((\d*\.)?\d+)([eE][-+]?\d+)?(?=[^.\w]))/,/^(?:\S+(?=\s))/,/^(?:(\r?\n)+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}